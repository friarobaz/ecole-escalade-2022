import {
  fs_exports,
  init_fs,
  init_path,
  path_exports
} from "./chunk-MAUNEH5Z.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __spreadProps,
  __spreadValues,
  __toCommonJS
} from "./chunk-ICLR7M5L.js";

// browser-external:os
var os_exports = {};
__export(os_exports, {
  default: () => os_default
});
var os_default;
var init_os = __esm({
  "browser-external:os"() {
    os_default = new Proxy({}, {
      get() {
        throw new Error('Module "os" has been externalized for browser compatibility and cannot be accessed in client code.');
      }
    });
  }
});

// node_modules/dotenv/lib/main.js
var require_main = __commonJS({
  "node_modules/dotenv/lib/main.js"(exports, module) {
    var fs = (init_fs(), __toCommonJS(fs_exports));
    var path = (init_path(), __toCommonJS(path_exports));
    var os = (init_os(), __toCommonJS(os_exports));
    var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
    function parse(src) {
      const obj = {};
      let lines = src.toString();
      lines = lines.replace(/\r\n?/mg, "\n");
      let match;
      while ((match = LINE.exec(lines)) != null) {
        const key = match[1];
        let value = match[2] || "";
        value = value.trim();
        const maybeQuote = value[0];
        value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
        if (maybeQuote === '"') {
          value = value.replace(/\\n/g, "\n");
          value = value.replace(/\\r/g, "\r");
        }
        obj[key] = value;
      }
      return obj;
    }
    function _log(message) {
      console.log(`[dotenv][DEBUG] ${message}`);
    }
    function _resolveHome(envPath) {
      return envPath[0] === "~" ? path.join(os.homedir(), envPath.slice(1)) : envPath;
    }
    function config(options) {
      let dotenvPath = path.resolve(process.cwd(), ".env");
      let encoding = "utf8";
      const debug = Boolean(options && options.debug);
      const override = Boolean(options && options.override);
      if (options) {
        if (options.path != null) {
          dotenvPath = _resolveHome(options.path);
        }
        if (options.encoding != null) {
          encoding = options.encoding;
        }
      }
      try {
        const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }));
        Object.keys(parsed).forEach(function(key) {
          if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
            process.env[key] = parsed[key];
          } else {
            if (override === true) {
              process.env[key] = parsed[key];
            }
            if (debug) {
              if (override === true) {
                _log(`"${key}" is already defined in \`process.env\` and WAS overwritten`);
              } else {
                _log(`"${key}" is already defined in \`process.env\` and was NOT overwritten`);
              }
            }
          }
        });
        return { parsed };
      } catch (e) {
        if (debug) {
          _log(`Failed to load ${dotenvPath} ${e.message}`);
        }
        return { error: e };
      }
    }
    var DotenvModule = {
      config,
      parse
    };
    module.exports.config = DotenvModule.config;
    module.exports.parse = DotenvModule.parse;
    module.exports = DotenvModule;
  }
});

// node_modules/configent/configent.js
var require_configent = __commonJS({
  "node_modules/configent/configent.js"(exports, module) {
    var { existsSync, readdirSync } = (init_fs(), __toCommonJS(fs_exports));
    var { resolve, dirname } = (init_path(), __toCommonJS(path_exports));
    var instances = {};
    var detectedFromDefaults = {};
    var _defaults = {
      name: "",
      cacheConfig: true,
      cacheDetectedDefaults: true,
      useDotEnv: true,
      useEnv: true,
      usePackageConfig: true,
      useConfig: true,
      useDetectDefaults: false,
      detectDefaultsConfigPath: "configs",
      sanitizeEnvValue: (str) => str.replace(/[-_][a-z]/g, (str2) => str2.substr(1).toUpperCase())
    };
    function configent(options) {
      options = __spreadValues(__spreadValues({}, _defaults), options);
      const getParentModuleDir = createGetParentModuleDir(options);
      options.name = options.name || __require(resolve(getParentModuleDir(), "package.json")).name;
      const {
        defaults,
        name,
        cacheConfig,
        cacheDetectedDefaults,
        useDotEnv,
        sanitizeEnvValue,
        useConfig,
        useEnv,
        usePackageConfig,
        useDetectDefaults,
        detectDefaultsConfigPath
      } = options;
      const upperCaseRE = new RegExp(`^${name.toUpperCase()}_`);
      return buildConfig();
      function buildConfig() {
        delete options.module;
        const hash = JSON.stringify({ name, defaults, options });
        if (!instances[hash] || !cacheConfig) {
          instances[hash] = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, defaults), useDetectDefaults && getDetectDefaults()), usePackageConfig && getPackageConfig()), useConfig && getUserConfig()), useEnv && getEnvConfig());
        }
        return instances[hash];
      }
      function getEnvConfig() {
        useDotEnv && require_main().config();
        const entries = Object.entries(process.env).filter(([key]) => key.match(upperCaseRE)).map(parseField);
        if (entries.length)
          return entries.reduce((prev, { key, value }) => __spreadProps(__spreadValues({}, prev), { [key]: value }), {});
        function parseField([key, value]) {
          const shouldParseValue = (k) => typeof defaults[k] === "object";
          key = sanitizeEnvValue(key.replace(upperCaseRE, ""));
          value = shouldParseValue(key) ? JSON.parse(value) : value;
          return { key, value };
        }
      }
      function getUserConfig() {
        const path = resolve(process.cwd(), `${name}.config.js`);
        return existsSync(path) ? __require(path) : {};
      }
      function getPackageConfig() {
        const path = resolve(process.cwd(), "package.json");
        return existsSync(path) && __require(path)[name];
      }
      function getDetectDefaults() {
        const hash = JSON.stringify({ name, path: module["parent"].path });
        if (!detectedFromDefaults[hash] || !cacheDetectedDefaults) {
          const pkgjson = { dependencies: {}, devDependencies: {} };
          if (existsSync("package.json")) {
            Object.assign(pkgjson, __require(resolve(process.cwd(), "package.json")));
          }
          Object.assign(pkgjson.dependencies, pkgjson.devDependencies);
          const unsortedConfigTemplates = readdirSync(resolve(getParentModuleDir(), detectDefaultsConfigPath)).map((file) => __spreadValues({
            file
          }, __require(resolve(getParentModuleDir(), detectDefaultsConfigPath, file))));
          const configTemplates = sortBySupersedings(unsortedConfigTemplates).filter((configTemplate) => configTemplate.condition({ pkgjson })).reverse();
          if (configTemplates) {
            if (configTemplates.length > 1)
              console.log(`[%s] detected defaults from %s`, name, configTemplates.filter((template) => template.file !== "default.config.js").map((template) => template.name).join(", "));
            detectedFromDefaults[hash] = Object.assign({}, ...configTemplates.map((template) => template.config({ pkgjson })));
          }
        }
        return detectedFromDefaults[hash];
      }
    }
    module.exports = { configent };
    function sortBySupersedings(arr) {
      arr = [...arr];
      const sorted = [];
      while (arr.length) {
        let foundMatch = false;
        const supersedings = [].concat(...arr.map((entry) => entry.supersedes || []));
        for (const [index, entry] of arr.entries()) {
          const file = entry.file.replace(/\.config\.js/, "");
          if (!supersedings.includes(file)) {
            sorted.push(...arr.splice(index, 1));
            foundMatch = true;
            break;
          }
        }
        if (!foundMatch)
          throw Error("Looks like you have circular supersedings \n" + arr.map((f) => `${f.file} supersedes ${f.supersedes}`).join("\n"));
      }
      return sorted;
    }
    function createGetParentModuleDir(options) {
      const { module: module2 } = options;
      let parentModuleDir;
      return () => {
        parentModuleDir = parentModuleDir || _getParentModuleDir(module2 && module2.path);
        return parentModuleDir;
      };
    }
    function _getParentModuleDir(path) {
      if (!path) {
        const modules = Object.values(__require.cache).filter((m) => m.children.includes(module));
        if (modules.length >= 2)
          missingModuleError(modules);
        else
          path = modules[0].path;
      }
      return existsSync(resolve(path, "package.json")) ? path : _getParentModuleDir(dirname(path));
    }
    function missingModuleError(modules) {
      const paths = modules.map((m) => _getParentModuleDir(m.path));
      throw new Error([
        `if multiple packages are using configent, they all need to provide the module.`,
        `Packages using configent: `,
        ...paths.map((p) => "- " + p),
        `Updating the packages may fix the problem.`,
        ""
      ].join("\n"));
    }
  }
});

// dep:@roxi_routify__configent
var roxi_routify_configent_default = require_configent();
export {
  roxi_routify_configent_default as default
};
//# sourceMappingURL=@roxi_routify__configent.js.map
