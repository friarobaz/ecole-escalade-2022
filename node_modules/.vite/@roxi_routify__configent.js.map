{
  "version": 3,
  "sources": ["browser-external:os", "../dotenv/lib/main.js", "../configent/configent.js", "dep:@roxi_routify__configent"],
  "sourcesContent": ["export default new Proxy({}, {\n  get() {\n    throw new Error('Module \"os\" has been externalized for browser compatibility and cannot be accessed in client code.')\n  }\n})", "const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parser src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _log (message) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key]\n        }\n\n        if (debug) {\n          if (override === true) {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`)\n          } else {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`)\n          }\n        }\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _log(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\nconst DotenvModule = {\n  config,\n  parse\n}\n\nmodule.exports.config = DotenvModule.config\nmodule.exports.parse = DotenvModule.parse\nmodule.exports = DotenvModule\n", "const { existsSync, readdirSync } = require('fs')\nconst { resolve, dirname } = require('path')\nlet instances = {}\nlet detectedFromDefaults = {}\n\nconst _defaults = {\n    name: '',\n    cacheConfig: true,\n    cacheDetectedDefaults: true,\n    useDotEnv: true,\n    useEnv: true,\n    usePackageConfig: true,\n    useConfig: true,\n    useDetectDefaults: false,\n    detectDefaultsConfigPath: 'configs',\n    sanitizeEnvValue: str => str.replace(/[-_][a-z]/g, str => str.substr(1).toUpperCase())\n}\n\n/**\n * @template {Object.<string, any>} options\n * @param {Partial<options>=} input provided input\n * @param {object} [options] configent options\n * @param {{}=} [options.defaults = {}] defaults. Used for type casting env variables\n * @param {string=} [options.name = ''] name to use for configs. If left empty, name from package.json is used\n * @param {boolean=} [options.cacheConfig = true] calling configent twice with same parameters will return the same instance\n * @param {boolean=} [options.cacheDetectedDefaults = true] calling configent twice from the same module will return the same defaults\n * @param {boolean=} [options.useDotEnv = true] include config from .env files\n * @param {boolean=} [options.useEnv = true] include config from process.env\n * @param {boolean=} [options.usePackageConfig = true] include config from package.json\n * @param {boolean=} [options.useConfig = true] include config from [name].config.js\n * @param {boolean=} [options.useDetectDefaults = true] detect defaults from context (package.json and file stucture)\n * @param {string=} [options.detectDefaultsConfigPath = 'configs'] detect defaults from context (package.json and file stucture)\n * @param {function=} [options.sanitizeEnvValue = str => str.replace(/[-_][a-z]/g, str => str.substr(1).toUpperCase())] sanitize environment values. Convert snake_case to camelCase by default. \n * @param {NodeModule} [options.module] required if multiple modules are using configent\n * @returns {options}\n */\nfunction configent(options) {\n    options = { ..._defaults, ...options }\n    const getParentModuleDir = createGetParentModuleDir(options)\n    options.name = options.name || require(resolve(getParentModuleDir(), 'package.json')).name\n\n    const {\n        defaults,\n        name,\n        cacheConfig,\n        cacheDetectedDefaults,\n        useDotEnv,\n        sanitizeEnvValue,\n        useConfig,\n        useEnv,\n        usePackageConfig,\n        useDetectDefaults,\n        detectDefaultsConfigPath\n    } = options\n    const upperCaseRE = new RegExp(`^${name.toUpperCase()}_`)\n\n    return buildConfig()\n\n    function buildConfig() {\n        delete (options.module)\n        const hash = JSON.stringify({ name, defaults, options })\n        if (!instances[hash] || !cacheConfig) {\n            instances[hash] = {\n                ...defaults,\n                ...useDetectDefaults && getDetectDefaults(),\n                ...usePackageConfig && getPackageConfig(),\n                ...useConfig && getUserConfig(),\n                ...useEnv && getEnvConfig(),\n            }\n        }\n        return instances[hash]\n    }\n\n    function getEnvConfig() {\n        useDotEnv && require('dotenv').config()\n        const entries = Object.entries(process.env)\n            .filter(([key]) => key.match(upperCaseRE))\n            .map(parseField)\n\n        if (entries.length)\n            return entries.reduce((prev, { key, value }) => ({ ...prev, [key]: value }), {})\n\n        function parseField([key, value]) {\n            const shouldParseValue = k => typeof defaults[k] === 'object'\n\n            key = sanitizeEnvValue(key.replace(upperCaseRE, ''))\n            value = shouldParseValue(key) ? JSON.parse(value) : value\n            return { key, value }\n        }\n    }\n\n    function getUserConfig() {\n        const path = resolve(process.cwd(), `${name}.config.js`)\n        return existsSync(path) ? require(path) : {}\n    }\n\n    function getPackageConfig() {\n        const path = resolve(process.cwd(), 'package.json')\n        return existsSync(path) && require(path)[name]\n    }\n\n    function getDetectDefaults() {\n        const hash = JSON.stringify({ name, path: module['parent'].path })\n\n        // we only want to detect the defaults for any given module once\n        if (!detectedFromDefaults[hash] || !cacheDetectedDefaults) {\n            const pkgjson = { dependencies: {}, devDependencies: {} };\n            if (existsSync('package.json')) {\n                Object.assign(pkgjson, require(resolve(process.cwd(), 'package.json')));\n            }\n\n            Object.assign(pkgjson.dependencies, pkgjson.devDependencies)\n\n            const unsortedConfigTemplates = readdirSync(resolve(getParentModuleDir(), detectDefaultsConfigPath))\n                .map(file => ({\n                    file,\n                    ...require(resolve(getParentModuleDir(), detectDefaultsConfigPath, file))\n                }))\n            const configTemplates = sortBySupersedings(unsortedConfigTemplates)\n                .filter(configTemplate => configTemplate.condition({ pkgjson }))\n                .reverse()\n            if (configTemplates) {\n                if (configTemplates.length > 1) // we don't care about the default template\n                console.log(`[%s] detected defaults from %s`, name, configTemplates.filter(template => template.file !== 'default.config.js').map(template => template.name).join(', '))\n                detectedFromDefaults[hash] = Object.assign({}, ...configTemplates.map(template => template.config({ pkgjson })))\n            }\n        }\n        return detectedFromDefaults[hash]\n    }\n}\n\nmodule.exports = { configent }\n\nfunction sortBySupersedings(arr) {\n    // clone the array\n    arr = [...arr]\n    const sorted = []\n\n    while (arr.length) {\n        let foundMatch = false\n        const supersedings = [].concat(...arr.map(entry => entry.supersedes || []))\n        for (const [index, entry] of arr.entries()) {\n            const file = entry.file.replace(/\\.config\\.js/, '')\n            if (!supersedings.includes(file)) {\n                sorted.push(...arr.splice(index, 1))\n                foundMatch = true\n                break\n            }\n        }\n        // each iteration should find and pluck one match\n        if (!foundMatch) throw Error('Looks like you have circular supersedings \\n' + arr.map(f => `${f.file} supersedes ${f.supersedes}`).join('\\n'))\n    }\n\n    return sorted\n}\n\nfunction createGetParentModuleDir(options) {\n    const { module } = options\n    let parentModuleDir\n    return () => {\n        parentModuleDir = parentModuleDir || _getParentModuleDir(module && module.path)\n        return parentModuleDir\n    }\n}\n\n// walk through parents till we find a package.json\nfunction _getParentModuleDir(path) {\n    if (!path) {\n        const modules = Object.values(require.cache)\n            /** @ts-ignore */\n            .filter((m) => m.children.includes(module))\n        if (modules.length >= 2) missingModuleError(modules)\n        else path = modules[0].path\n    }\n\n    return (existsSync(resolve(path, 'package.json'))) ?\n        path : _getParentModuleDir(dirname(path))\n}\n\nfunction missingModuleError(modules) {\n    const paths = modules.map(m => _getParentModuleDir(m.path))\n    throw new Error([\n        `if multiple packages are using configent, they all need to provide the module.`,\n        `Packages using configent: `,\n        ...paths.map(p => '- ' + p),\n        `Updating the packages may fix the problem.`, ''\n    ].join('\\n'))\n}", "export default require(\"./node_modules/configent/configent.js\");"],
  "mappings": "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",
  "names": []
}
