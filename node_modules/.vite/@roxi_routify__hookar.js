import "./chunk-ICLR7M5L.js";

// node_modules/hookar/index.js
var createHooksCollection = (runner) => {
  const hooks = [];
  const hooksCollection = (hook) => {
    hooks.push(hook);
    return () => hooks.splice(hooks.indexOf(hook), 1);
  };
  hooksCollection.hooks = hooks;
  hooksCollection.run = runner(hooks);
  return hooksCollection;
};
var createPipelineCollection = (type) => createHooksCollection((hooks) => (value, ...rest) => hooks.reduce((pipedValue, hook) => (pipedValue == null ? void 0 : pipedValue.then) ? pipedValue.then((r) => hook(r, ...rest)) : hook(pipedValue, ...rest), value));
var createSequenceHooksCollection = (type) => createHooksCollection((hooks) => (value, ...rest) => hooks.reduce((last, hook) => (last == null ? void 0 : last.then) ? last.then((_) => hook(value, ...rest)) : hook(value, ...rest), value));
var createParallelHooksCollection = (type) => createHooksCollection((hooks) => (value, ...rest) => Promise.all(hooks.map((hook) => hook(value, ...rest))).then((r) => value));
var createGuardsCollection = (type) => createHooksCollection((hooks) => (value, ...rest) => hooks.reduce((pipedValue, hook) => (pipedValue == null ? void 0 : pipedValue.then) ? pipedValue.then((r) => r && hook(value, ...rest)) : pipedValue && hook(value, ...rest), value || true));
export {
  createGuardsCollection,
  createParallelHooksCollection,
  createPipelineCollection,
  createSequenceHooksCollection
};
//# sourceMappingURL=@roxi_routify__hookar.js.map
